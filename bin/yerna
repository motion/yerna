#!/usr/bin/env node

// Copyright 2017 Palantir Technologies Inc.

require('../lib/error-handling').attachGlobalErrorHandling();
process.exitCode = 0;

const chalk = require('chalk');
const commander = require('commander');

const { performInstall, performLink, performList, performRun, performExec } = require('../lib')
const { logger, deleteLogFile } = require('../lib/logger');

function optParallel(n) {
  if (n == null || +n <= 0 || Math.round(n) !== +n) {
    console.error(chalk.red('yerna: parallel option must be a positive integer'));
    // Should probably be exitCode = 1.
    process.exit(1);
  }
  return +n;
}

function command(fn) {
  sideEffectingInit()
  fn()
}

let didInit = false;
function sideEffectingInit() {
  if (didInit) {
    return;
  }
  didInit = true;

  logger.transports.console.level = commander.loglevel;

  if (!commander.color) {
    chalk.enabled = false;
  }

  // 10 for default, then one for each of the 'exit' handlers we know will be attached by child processes.
  // All this does is prevent warnings, but it's good practice.
  process.setMaxListeners(10 + commander.parallel);

  deleteLogFile();

  process.on('exit', () => {
    if (process.exitCode === 0) {
      deleteLogFile();
    }
  });

  process.on('SIGINT', () => {
    logger.error(chalk.red('yerna: received sigint, terminating...'));
    abort();
  });
}

function concatOpt(opt, allOpts) {
  return allOpts.concat([ opt ]);
}

commander
  .description('Yerna: run tasks over one or more packages in parallel')
  .usage('<command> [yerna options] [-- delegate options]')
  .version(require('../package.json').version)
  .option('-i, --include <regex>', 'run command only on packages matching <regex>; can be specified multiple times (default: all packages)', concatOpt, [])
  .option('-x, --exclude <regex>', 'run command except on packages matching <regex>; can be specified multiple times (default: no excludes)', concatOpt, [])
  .option('--dependents', 'additionally include all transitive dependents of selected packages (even when excluded)', false)
  .option('--dependencies', 'additionally include all transitive dependencies of selected packages (even when excluded)', false)
  .option('-p, --parallel <n>', 'run up to <n> processes in parallel (default: 4)', optParallel, 4)
  .option('-l, --loglevel <level>', 'set the log level for Yerna', /^(verbose|info|warn|error)$/i, 'info')
  .option('-c, --no-color', 'disable colorized output', false);

commander
  .command('install -- [args...]')
  .description('`yarn install` for the specified packages')
  .action(command(performInstall));

commander
  .command('link')
  .description('symlink all local package dependencies (ignores all flags)')
  .action(command(performLink));

commander
  .command('list')
  .description('list package names matching all provided flags')
  .action(command(performList));

commander
  .command('run <scriptname> -- [args...]')
  .description('`yarn run <scriptname>` for the specified packages')
  .action(command(performRun));

commander
  .command('exec <executable> -- [args...]')
  .description('run `<executable> <args>` for the specified packages')
  .action(command(performExec));

commander.on('--help', () =>{
  [
    '  Notes:',
    '',
    '    - Use -- to separate arguments intended for Yarn. See examples.',
    '    - Most tasks automatically relink local dependencies; `yerna link` usage should be rare.',
    '',
    '  Examples:',
    '',
    '    $ yerna install',
    '    $ yerna install --include foo',
    '    $ yerna install -- --pure-lockfile',
    '    $ yerna install --include foo --include bar -- --pure-lockfile',
    '    $ yerna run taskname --include foo --exclude bar',
    '    $ yerna exec ls -- -la',
    ''
  ].forEach(line => console.log(line));
});

commander.parse(process.argv);

if (!didInit) {
  commander.outputHelp();
  process.exitCode = 2;
}
